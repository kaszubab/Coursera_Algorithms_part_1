/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import edu.princeton.cs.algs4.StdRandom;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class RandomizedQueue<Item> implements Iterable<Item> {

    private Item [] arr;
    private int last;
    // construct an empty randomized queue
    public RandomizedQueue() {
        arr = (Item []) new Object[10];
        last = 0;
    }

    private void resize(int cap) {
        Item [] copy = (Item []) new Object[cap];
        for(int i = 0; i < last; i++) {
            copy[i] = arr[i];
        }
        arr = copy;
    }

    private void swap(int first, int second) {
        Item temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    // is the randomized queue empty?
    public boolean isEmpty() {
        return last == 0;
    }

    // return the number of items on the randomized queue
    public int size() {
        return last;
    }

    // add the item
    public void enqueue(Item item) {
        if (item == null)
            throw new IllegalArgumentException("No null values");
        if (last == arr.length )
            resize(2*arr.length);
        arr[last++] = item;
    }

    // remove and return a random item
    public Item dequeue() {
        if (isEmpty())
            throw new NoSuchElementException("Queue empty");
        int index = StdRandom.uniform(0, last);
        Item item = arr[index];
        arr[index] = null;
        swap(index, --last);
        if (last > 0 && last < (arr.length/4))
            resize(arr.length/2);
        return  item;
    }

    // return a random item (but do not remove it)
    public Item sample() {
        if (isEmpty())
            throw new NoSuchElementException("Queue empty");
        int index = StdRandom.uniform(0, last);
        Item item = arr[index];
        return  item;
    }

    // return an independent iterator over items in random order
    private class ArrayIterator implements Iterator<Item> {

        private int i = last;
        private Item [] resArr;

        ArrayIterator() {
            resArr = arr;
            StdRandom.shuffle(resArr,0,last);
        }

        @Override
        public boolean hasNext() {
            return  i > 0;
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException("Remove not available");
        }

        @Override
        public Item next() {
            if (!hasNext())
                throw new NoSuchElementException("Iterator already empty");
            return resArr[--i];
        }
    }

    // return an iterator over items in order from front to back
    public Iterator<Item> iterator() {
        return new ArrayIterator();
    }

    // unit testing (required)
    public static void main(String[] args) {
        RandomizedQueue<Integer> queue = new RandomizedQueue<>();
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        System.out.println(queue.sample());
         for (int x : queue) {
            System.out.println(x);
        }
    }

}
